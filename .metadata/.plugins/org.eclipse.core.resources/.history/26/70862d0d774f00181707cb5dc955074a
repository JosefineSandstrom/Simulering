import java.util.*;
import java.io.*;

class State4{
	public int noBusyServers, noMeasurements = 0, N = 1000;
	public double totalTime = 0;
	Random slump = new Random();
	SimpleFileWriter W = new SimpleFileWriter("number.m", false);
	
	LinkedList<Double> arrivalTimes = new LinkedList<Double>();

	public void TreatEvent(Event x){
		switch (x.eventType){
		case G4.ARRIVAL:{
			if (noBusyServers < N){
				EventList.InsertEvent(G.departureFrom1, G.time - (1.0)*Math.log(slump.nextDouble()));
			}
			numberInQueue1++;
			EventList.InsertEvent(G.arrivalTo1, G.time - (2.0)*Math.log(slump.nextDouble())); //Interarrival times = 2, 1,5 or 1,1
		} break;
		case G4.DEPARTURE:{
			numberInQueue1--;
			if (numberInQueue2 == 0){
				EventList.InsertEvent(G.departureFrom2, G.time - (1.0)*Math.log(slump.nextDouble()));
			}
			numberInQueue2++;
			if (numberInQueue1 > 0){
				EventList.InsertEvent(G.departureFrom1, G.time - (1.0)*Math.log(slump.nextDouble()));
			}
		} break;
		case G4.MEASURE:{
			noMeasurements++;
			accumulated1 = accumulated1 + numberInQueue1;
			accumulated2 = accumulated2 + numberInQueue2;
			EventList.InsertEvent(G.MEASURE, G.time - (5.0)*Math.log(slump.nextDouble()));
			W.println(String.valueOf(numberInQueue1));
		} break;
		}
	}
}