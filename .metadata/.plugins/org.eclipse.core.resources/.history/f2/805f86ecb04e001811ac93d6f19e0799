import java.util.*;
import java.io.*;

class State2{
	public int AinQueue = 0, BinQueue = 0, accumulated = AinQueue+BinQueue, noMeasurements = 0;
	public double xA = 0.002, xB = 0.004, lambda = 150, d = 1;

	Random slump = new Random();
	SimpleFileWriter W = new SimpleFileWriter("number.m", false);

	public void TreatEvent(Event x){
		switch (x.eventType){
		case G2.arrivalA:{
			AinQueue++;
			if (BinQueue == 1){
				EventList.InsertEvent(G2.departureB, G2.time + xB);
			}
			if (AinQueue == 1){
				EventList.InsertEvent(G2.departureA, G2.time + xA);
			}
			EventList.InsertEvent(G2.arrivalA, G2.time - (1/150)*Math.log(slump.nextDouble())); 				
		} break;
		case G2.departureFrom1:{
			numberInQueue1--;
			numberInQueue2++;
			if (numberInQueue2 == 1){
				EventList.InsertEvent(G2.departureFrom2, G2.time + 2);
			}
			if (numberInQueue1 > 0){
				EventList.InsertEvent(G2.departureFrom1, G2.time - (2.1)*Math.log(slump.nextDouble()));
			}
		} break;
		case G2.departureFrom2:{
			numberInQueue2--;
			if (numberInQueue2 > 0){
				EventList.InsertEvent(G2.departureFrom2, G2.time + 2);
			}
		} break;
		case G2.MEASURE:{
			noMeasurements++;
			accumulated1 = accumulated1 + numberInQueue1;
			accumulated2 = accumulated2 + numberInQueue2;
			EventList.InsertEvent(G2.MEASURE, G2.time - (5.0)*Math.log(slump.nextDouble()));
			W.println(String.valueOf(numberInQueue1));
		} break;
		}
	}
}